{
  "version": 3,
  "sources": ["../../three/examples/jsm/shaders/CopyShader.js"],
  "sourcesContent": ["/**\n * Full-screen textured quad shader\n */\n\nconst CopyShader = {\n\n\tname: 'CopyShader',\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'opacity': { value: 1.0 },\n        'bayer': {value: new THREE.TextureLoader().load('public/bayer.png')},\n        'viewport_size': {value: new THREE.Vector2(this.canvas.width, this.canvas.height)}\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float opacity;\n\n\t\tuniform sampler2D tDiffuse;\n        uniform sampler2D bayer;\n        uniform vec2 viewport_size;\n\n\t\tvarying vec2 vUv;\n\n\t\tconst mat4 bayertl = mat4( \n\t\t\t0.0/64.0, 32.0/64.0,  8.0/64.0, 40.0/64.0,\n\t\t   48.0/64.0, 16.0/64.0, 56.0/64.0, 24.0/64.0,\n\t\t   12.0/64.0, 44.0/64.0,  4.0/64.0, 36.0/64.0,\n\t\t   60.0/64.0, 28.0/64.0, 52.0/64.0, 20.0/64.0\n\t\t   );\n\t\t   \n\t\t   const mat4 bayertr = mat4( \n\t\t\t2.0/64.0, 34.0/64.0, 10.0/64.0, 42.0/64.0,\n\t\t   50.0/64.0, 18.0/64.0, 58.0/64.0, 26.0/64.0,\n\t\t   14.0/64.0, 46.0/64.0,  6.0/64.0, 38.0/64.0,\n\t\t   62.0/64.0, 30.0/64.0, 54.0/64.0, 22.0/64.0\n\t\t   );\n\t\t   \n\t\t   const mat4 bayerbl = mat4( \n\t\t\t3.0/64.0, 35.0/64.0, 11.0/64.0, 43.0/64.0,\n\t\t   51.0/64.0, 19.0/64.0, 59.0/64.0, 27.0/64.0,\n\t\t   15.0/64.0, 47.0/64.0,  7.0/64.0, 39.0/64.0,\n\t\t   63.0/64.0, 31.0/64.0, 55.0/64.0, 23.0/64.0\n\t\t   );\n\t\t\t   \n\t\t   const mat4 bayerbr = mat4( \n\t\t\t1.0/64.0, 33.0/64.0,  9.0/64.0, 41.0/64.0,\n\t\t   49.0/64.0, 17.0/64.0, 57.0/64.0, 25.0/64.0,\n\t\t   13.0/64.0, 45.0/64.0,  5.0/64.0, 37.0/64.0,\n\t\t   61.0/64.0, 29.0/64.0, 53.0/64.0, 21.0/64.0\n\t\t   );\n\t\t   \n\t\t   float dither( mat4 m, ivec2 p )\n\t\t   {\n\t\t\t   if( p.y == 0 ) \n\t\t\t   {\n\t\t\t\t   if( p.x == 0 ) return m[0][0];\n\t\t\t\t   else if( p.x == 1 ) return m[1][0];\n\t\t\t\t   else if( p.x == 2 ) return m[2][0];\n\t\t\t\t   else return m[3][0];\t\n\t\t\t   }\t\n\t\t\t   else if( p.y == 1 ) \n\t\t\t   {\n\t\t\t\t   if( p.x == 0 ) return m[0][1];\n\t\t\t\t   else if( p.x == 1 ) return m[1][1];\n\t\t\t\t   else if( p.x == 2 ) return m[2][1];\n\t\t\t\t   else return m[3][1];\t\n\t\t\t   }\t\n\t\t\t   else if( p.y == 2 ) \n\t\t\t   {\n\t\t\t\t   if( p.x == 0 ) return m[0][1];\n\t\t\t\t   else if( p.x == 1 ) return m[1][2];\n\t\t\t\t   else if( p.x == 2 ) return m[2][2];\n\t\t\t\t   else return m[3][2];\t\n\t\t\t   }\t\n\t\t\t   else \n\t\t\t   {\n\t\t\t\t   if( p.x == 0 ) return m[0][3];\n\t\t\t\t   else if( p.x == 1 ) return m[1][3];\n\t\t\t\t   else if( p.x == 2 ) return m[2][3];\n\t\t\t\t   else return m[3][3];\t\n\t\t\t   }\t\n\t\t   }\n\n\t\tvoid main() {\n            \n\t\t\tivec2 p = ivec2(mod( vUv.xy, 8.0 ));\n\tvec2 uv = vUv.xy / viewport_size.xy;\n\tvec3 c = texture2D( tDiffuse, uv ).xyz;\n\tc = pow( c, vec3(2.2) );\t\n\tc -= 1.0/255.0;\n\t\n\tvec3 d = vec3(0.0);\n\tif( p.x <= 3 && p.y <= 3 )\n\t{\n\t\td.r = float( c.r > dither( bayertl, p ) );\n\t\td.g = float( c.g > dither( bayertl, p ) );\n\t\td.b = float( c.b > dither( bayertl, p ) );\n\t}\n\telse if ( p.x > 3 && p.y <= 3 )\n\t{\n\t\td.r = float( c.r > dither( bayertr, p -ivec2(4,0) ) );\n\t\td.g = float( c.g > dither( bayertr, p -ivec2(4,0) ) );\n\t\td.b = float( c.b > dither( bayertr, p -ivec2(4,0) ) );\n\t}\n\telse if( p.x <= 3 && p.y > 3 )\n\t{\n\t\td.r = float( c.r > dither( bayerbl, p-ivec2(0,4)  ) );\n\t\td.g = float( c.g > dither( bayerbl, p-ivec2(0,4)  ) );\n\t\td.b = float( c.b > dither( bayerbl, p-ivec2(0,4)  ) );\n\t}\n\telse if ( p.x > 3 && p.y > 3 )\n\t{\n\t\td.r = float( c.r > dither( bayerbr, p -ivec2(4,4) ) );\n\t\td.g = float( c.g > dither( bayerbr, p -ivec2(4,4) ) );\n\t\td.b = float( c.b > dither( bayerbr, p -ivec2(4,4) ) );\n\t}\n\t\n\tout_color = vec4(d, 1.0);\n\n            //vec4 out_color = step(texture2D(tDiffuse, vUv/8.).r, texture(bayer,vUv/viewport_size.xy));\n\t\t\tgl_FragColor = out_color;\n\t\t}`\n\n};\n\nexport { CopyShader };\n"],
  "mappings": ";AAIA,IAAM,aAAa;AAAA,EAElB,MAAM;AAAA,EAEN,UAAU;AAAA,IAET,YAAY,EAAE,OAAO,KAAK;AAAA,IAC1B,WAAW,EAAE,OAAO,EAAI;AAAA,IAClB,SAAS,EAAC,OAAO,IAAI,MAAM,cAAc,EAAE,KAAK,kBAAkB,EAAC;AAAA,IACnE,iBAAiB,EAAC,OAAO,IAAI,MAAM,QAAQ,SAAK,OAAO,OAAO,SAAK,OAAO,MAAM,EAAC;AAAA,EAExF;AAAA,EAEA;AAAA;AAAA,IAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWx
  "names": []
}
